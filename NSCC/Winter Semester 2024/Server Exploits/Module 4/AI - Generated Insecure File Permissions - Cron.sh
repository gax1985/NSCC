# Insecure File Permissions - Cron

# Setup

# Create bash script that will be run every minute : 


#!/bin/bash


#   Let us create a variable that contains the output of the DATE command (where we indicate %F for full date, %H is for Hours, 
#   %M for Minutes, and %S for seconds) : 

TIME=$(date '+%F_%H:%M:%S')

echo $TIME > /var/scripts/time.txt


#   


#   AI Example :
#   echo -e '#!/bin/bash\n\ndate > /var/scripts/time.txt' > /var/scripts/bash_script.sh

# Explanation: We create a bash script to write the current date to time.txt every minute.
# Countermeasure: Limit permissions on scripts running with cron to prevent unauthorized modifications.
#!/bin/bash
# Set permissions on the scripts folder
sudo chmod -R 777 /var/scripts

# Explanation: Giving everyone read, write, and execute permissions on the scripts folder allows any user to modify scripts.
# Countermeasure: Limit permissions on sensitive directories to authorized users only.

# Setup cron for root
sudo crontab -e

# Explanation: We set up a cron job for the root user to run the bash script.
# Countermeasure: Avoid using cron with root privileges unless necessary.

# Exploitation

# View cron logs
grep CRON /var/log/syslog

# Explanation: We check syslog to confirm cron jobs running as root.
# Countermeasure: Monitor cron logs for suspicious activity.

# Mitigation

# Don't use cron with root unless necessary
# Explanation: Running cron as root increases the risk of privilege escalation.
# Countermeasure: Avoid running cron jobs with root privileges unless absolutely necessary.

# Avoid weak file permissions on scripts running with cron
# Explanation: Weak file permissions on cron scripts can allow unauthorized modification and execution.
# Countermeasure: Set restrictive permissions on cron scripts to prevent unauthorized access.